module enif;

const int ERL_NIF_MAJOR_VERSION = 2;
const int ERL_NIF_MINOR_VERSION = 17;
const char* ERL_NIF_MIN_ERTS_VERSION = "erts-14.0";

distinct ErlNifTerm = inline ulong;
def Enum = int;
def ErlNifCharEncoding = Enum;
def ErlNifHash = Enum;
def ErlNifUInt = ErlNifTerm;
def ErlNifFuncPtr = fn ErlNifTerm(ErlNifEnv* env, int argc, ErlNifTerm* argv);
def ErlNifLoadFunc = fn int(ErlNifEnv*, void*, ErlNifTerm);
def ErlNifUpgradeFunc = fn int(ErlNifEnv*, void*, void*, ErlNifTerm);
def ErlNifUnloadFunc = fn void(ErlNifEnv*, void*);
def ErlNifIOQueueOpts = Enum;
def ErlNifMapIteratorEntry = Enum;
def ErlNifMonitor = ErlDrvMonitor;
def ErlNifEvent = int;
def ErlNifOption = Enum;
def ErlNifResourceDown = fn void(ErlNifEnv*, void*, ErlNifPid*, ErlNifMonitor*);
def ErlNifResourceDtor = fn void(ErlNifEnv*, void*);
def ErlNifResourceDynCall = fn void(ErlNifEnv*, void*, void*);
def ErlNifResourceStop = fn void(ErlNifEnv*, void*, ErlNifEvent, int);
def ErlNifResourceFlags = Enum;
def ErlNifSelectFlags = Enum;
def ErlNifSInt64 = long;
def ErlNifSysInfo = ErlDrvSysInfo;
def ErlNifTermType = Enum;
def ErlNifTimeUnit = Enum;
def EnifThreadFuncPtr = fn void*(void*);
def ErlNifTime = int;
def ErlNifUniqueInteger = Enum;
def File = int;

struct ErlDrvMonitor {
    char[32] data;
}

struct ErlNifBinary {
  ulong size;
  char* data;
  void* ref_bin;
  void*[2] __spare__;
}

struct ErlNifCond {
	char _unused;
}

struct ErlNifEnv {
	char _unused;
}

struct ErlNifFunc {
    char* name;
    uint arity;
    ErlNifFuncPtr fptr;
    uint flags;
}

struct ErlNifPid {
    ErlNifTerm pid;
}

struct ErlNifPort {
  ErlNifTerm port_id;
}

struct ErlNifIOVec {
	int iovcnt;
	ulong size;
	SysIOVec* iov;
	void** ref_bins;
	int flags;
	SysIOVec[16] small_iov;
	void*[16] small_ref_bin;
}

struct ErlNifResourceType {
	char _unused;
}

struct ErlNifResourceTypeInit {
  ErlNifResourceDtor *dtor;
  ErlNifResourceStop *stop;
  ErlNifResourceDown *down;
  int members;
  ErlNifResourceDynCall *dyncall;
}

struct SysIOVec {
  char* iov_base;
  ulong iov_len;
}

struct ErlNifEntry {
    int major;
    int minor;
    char* name;
    int num_of_funcs;
    ErlNifFunc* funcs;
    ErlNifLoadFunc* load;
    ErlNifLoadFunc* reload;
    ErlNifUpgradeFunc* upgrade;
    ErlNifUnloadFunc* unload;
    char* vm_variant;
    ulong options;
    ulong sizeof_ErlNifResourceTypeInit;
    char* min_erts;
}

struct ErlNifIOQueue {
    char _unused;
}

struct _ErlNifMapIteratorFlat {
    ErlNifTerm *ks;
    ErlNifTerm *vs;
}

struct _ErlNifMapIteratorHash {
    ErtsDynamicWStack* wstack;
    ErlNifTerm *kv;
}

union _ErlNifMapIteratorFlatHash {
    _ErlNifMapIteratorFlat flat;
	_ErlNifMapIteratorHash hash;
}

struct ErlNifMapIterator {
	ErlNifTerm map;
	ErlNifUInt size;
	ErlNifUInt idx;
	_ErlNifMapIteratorFlatHash u;
	void*[2] __spare__;
}

struct ErlNifMutex {
	char _unused;
}

struct ErtsDynamicWStack {
	char _address;
}

struct ErlDrvSysInfo {
  int driver_major_version;
  int driver_minor_version;
  char* erts_version;
  char* otp_release;
  int thread_support;
  int smp_support;
  int async_threads;
  int scheduler_threads;
  int nif_major_version;
  int nif_minor_version;
  int dirty_scheduler_support;
}

struct ErlNifTid {
	char _unused;
}

extern fn void* alloc(usz size) @extern("enif_alloc");
extern fn int alloc_binary(usz size, ErlNifBinary* bin) @extern("enif_alloc_binary");
extern fn ErlNifEnv* alloc_env() @extern("enif_alloc_env");
extern fn void* alloc_resource(ErlNifResourceType* type, usz size) @extern("enif_alloc_resource");
extern fn ulong binary_to_term(ErlNifEnv* env, char* data, usz size, ErlNifTerm* term, int opts) @extern("enif_binary_to_term");
extern fn void clear_env(ErlNifEnv* env) @extern("enif_clear_env");
extern fn int compare(ErlNifTerm lhs, ErlNifTerm rhs) @extern("enif_compare");
extern fn int compare_monitors(ErlNifMonitor* monitor1, ErlNifMonitor* monitor2) @extern("enif_compare_monitors");
extern fn int compare_pids(ErlNifPid* pid1, ErlNifPid* pid2) @extern("enif_compare_pids");
extern fn void cond_broadcast(ErlNifCond* cnd) @extern("enif_cond_broadcast");
extern fn ErlNifCond* cond_create(char* name) @extern("enif_cond_create");
extern fn void cond_destroy(ErlNifCond* cnd) @extern("enif_cond_destroy");
extern fn char* cond_name(ErlNifCond* cnd) @extern("enif_cond_name");
extern fn void cond_signal(ErlNifCond* cnd) @extern("enif_cond_signal");
extern fn void cond_wait(ErlNifCond* cnd, ErlNifMutex* mtx) @extern("enif_cond_wait");
extern fn int consume_timeslice(ErlNifEnv* env, int percent) @extern("enif_consume_timeslice");
extern fn ErlNifTime convert_time_unit(ErlNifTime val, ErlNifTimeUnit from, ErlNifTimeUnit to) @extern("enif_convert_time_unit");
extern fn ErlNifTerm cpu_time(ErlNifEnv* ) @extern("enif_cpu_time");
extern fn int demonitor_process(ErlNifEnv* caller_env, void* obj, ErlNifMonitor* mon) @extern("enif_demonitor_process");
extern fn int dynamic_resource_call(ErlNifEnv* caller_env, ErlNifTerm rt_module, ErlNifTerm rt_name, ErlNifTerm resource, void* call_data) @extern("enif_dynamic_resource_call");
extern fn int equal_tids(ErlNifTid tid1, ErlNifTid tid2) @extern("enif_equal_tids");
extern fn int fprintf(File* stream, char* format, ...) @extern("enif_fprintf");
extern fn void free(void* ptr) @extern("enif_free");
extern fn void free_env(ErlNifEnv* env) @extern("enif_free_env");
extern fn void free_iovec(ErlNifIOVec* iov) @extern("enif_free_iovec");
extern fn int get_atom(ErlNifEnv* env, ErlNifTerm term, char* buf, ulong size, ErlNifCharEncoding encoding) @extern("enif_get_atom");
extern fn int get_atom_length(ErlNifEnv* env, ErlNifTerm term, ulong* len, ErlNifCharEncoding encoding) @extern("enif_get_atom_length");
extern fn int get_double(ErlNifEnv* env, ErlNifTerm term, double* dp) @extern("enif_get_double");
extern fn int get_int(ErlNifEnv* env, ErlNifTerm term, int* ip) @extern("enif_get_int");
extern fn int get_int64(ErlNifEnv* env, ErlNifTerm term, ErlNifSInt64* ip) @extern("enif_get_int64");
extern fn int get_local_pid(ErlNifEnv* env, ErlNifTerm term, ErlNifPid* pid) @extern("enif_get_local_pid");
extern fn int get_local_port(ErlNifEnv* env, ErlNifTerm term, ErlNifPort* port_id) @extern("enif_get_local_port");
extern fn int get_list_cell(ErlNifEnv* env, ErlNifTerm list, ErlNifTerm* head, ErlNifTerm* tail) @extern("enif_get_list_cell");
extern fn int get_list_length(ErlNifEnv* env, ErlNifTerm term, ulong* len) @extern("enif_get_list_length");
extern fn int get_long(ErlNifEnv* env, ErlNifTerm term, long* ip) @extern("enif_get_long");
extern fn int get_map_size(ErlNifEnv* env, ErlNifTerm term, usz* size) @extern("enif_get_map_size");
extern fn int get_map_value(ErlNifEnv* env, ErlNifTerm map, ErlNifTerm key, ErlNifTerm* value) @extern("enif_get_map_value");
extern fn int get_resource(ErlNifEnv* env, ErlNifTerm term, ErlNifResourceType* type, void** objp) @extern("enif_get_resource");
extern fn int get_string(ErlNifEnv* env, ErlNifTerm list, char* buf, ulong size, ErlNifCharEncoding encoding) @extern("enif_get_string");
extern fn int get_string_length(ErlNifEnv* env, ErlNifTerm list, ulong* len, ErlNifCharEncoding encoding) @extern("enif_get_string_length");
extern fn int get_tuple(ErlNifEnv* env, ErlNifTerm term, int* arity, ErlNifTerm** array) @extern("enif_get_tuple");
extern fn int get_uint(ErlNifEnv* env, ErlNifTerm term, int* ip) @extern("enif_get_uint");
extern fn int get_uint64(ErlNifEnv* env, ErlNifTerm term, ErlNifUInt* ip) @extern("enif_get_uint64");
extern fn int get_ulong(ErlNifEnv* env, ErlNifTerm term, ulong* ip) @extern("enif_get_ulong");
extern fn int getenv(char* key, char* value, usz* value_size) @extern("enif_getenv");
extern fn int has_pending_exception(ErlNifEnv* env, ErlNifTerm* reason) @extern("enif_has_pending_exception");
extern fn ErlNifUInt hash(ErlNifHash type, ErlNifTerm term, ErlNifUInt salt) @extern("enif_hash");
extern fn int inspect_binary(ErlNifEnv* env, ErlNifTerm bin_term, ErlNifBinary* bin) @extern("enif_inspect_binary");
extern fn int inspect_iolist_as_binary(ErlNifEnv* env, ErlNifTerm term, ErlNifBinary* bin) @extern("enif_inspect_iolist_as_binary");
extern fn int inspect_iovec(ErlNifEnv* env, usz max_elements, ErlNifTerm iovec_term, ErlNifTerm* tail, ErlNifIOVec** iovec) @extern("enif_inspect_iovec");
extern fn ErlNifIOQueue* ioq_create(ErlNifIOQueueOpts opts) @extern("enif_ioq_create");
extern fn void ioq_destroy(ErlNifIOQueue* q) @extern("enif_ioq_destroy");
extern fn int ioq_deq(ErlNifIOQueue* q, usz count, usz* size) @extern("enif_ioq_deq");
extern fn int ioq_enq_binary(ErlNifIOQueue* q, ErlNifBinary* bin, usz skip) @extern("enif_ioq_enq_binary");
extern fn int ioq_enqv(ErlNifIOQueue* q, ErlNifIOVec* iovec, usz skip) @extern("enif_ioq_enqv");
extern fn SysIOVec* ioq_peek(ErlNifIOQueue* q, int* iovlen) @extern("enif_ioq_peek");
extern fn int ioq_peek_head(ErlNifEnv* env, ErlNifIOQueue* q, usz* size, ErlNifTerm* bin_term) @extern("enif_ioq_peek_head");
extern fn usz ioq_size(ErlNifIOQueue* q) @extern("enif_ioq_size");
extern fn int is_atom(ErlNifEnv* env, ErlNifTerm term) @extern("enif_is_atom");
extern fn int is_binary(ErlNifEnv* env, ErlNifTerm term) @extern("enif_is_binary");
extern fn int is_current_process_alive(ErlNifEnv* env) @extern("enif_is_current_process_alive");
extern fn int is_empty_list(ErlNifEnv* env, ErlNifTerm term) @extern("enif_is_empty_list");
extern fn int is_exception(ErlNifEnv* env, ErlNifTerm term) @extern("enif_is_exception");
extern fn int is_fun(ErlNifEnv* env, ErlNifTerm term) @extern("enif_is_fun");
extern fn int is_identical(ErlNifTerm lhs, ErlNifTerm rhs) @extern("enif_is_identical");
extern fn int is_list(ErlNifEnv* env, ErlNifTerm term) @extern("enif_is_list");
extern fn int is_map(ErlNifEnv* env, ErlNifTerm term) @extern("enif_is_map");
extern fn int is_number(ErlNifEnv* env, ErlNifTerm term) @extern("enif_is_number");
extern fn int is_pid(ErlNifEnv* env, ErlNifTerm term) @extern("enif_is_pid");
extern fn int is_pid_undefined(ErlNifPid* pid) @extern("enif_is_pid_undefined");
extern fn int is_port(ErlNifEnv* env, ErlNifTerm term) @extern("enif_is_port");
extern fn int is_port_alive(ErlNifEnv* env, ErlNifPort* port_id) @extern("enif_is_port_alive");
extern fn int is_process_alive(ErlNifEnv* env, ErlNifPid* pid) @extern("enif_is_process_alive");
extern fn int is_ref(ErlNifEnv* env, ErlNifTerm term) @extern("enif_is_ref");
extern fn int is_tuple(ErlNifEnv* env, ErlNifTerm term) @extern("enif_is_tuple");
extern fn int keep_resource(void* obj) @extern("enif_keep_resource");
extern fn ErlNifTerm make_atom(ErlNifEnv* env, char* name) @extern("enif_make_atom");
extern fn ErlNifTerm make_atom_len(ErlNifEnv* env, char* name, usz len) @extern("enif_make_atom_len");
extern fn ErlNifTerm make_badarg(ErlNifEnv* env) @extern("enif_make_badarg");
extern fn ErlNifTerm make_binary(ErlNifEnv* env, ErlNifBinary* bin) @extern("enif_make_binary");
extern fn ErlNifTerm make_copy(ErlNifEnv* dst_env, ErlNifTerm src_term) @extern("enif_make_copy");
extern fn ErlNifTerm make_double(ErlNifEnv* env, double d) @extern("enif_make_double");
extern fn int make_existing_atom(ErlNifEnv* env, char* name, ErlNifTerm* atom, ErlNifCharEncoding encoding) @extern("enif_make_existing_atom");
extern fn int make_existing_atom_len(ErlNifEnv* env, char* name, usz len, ErlNifTerm* atom, ErlNifCharEncoding encoding) @extern("enif_make_existing_atom_len");
extern fn ErlNifTerm make_int(ErlNifEnv* env, int i) @extern("enif_make_int");
extern fn ErlNifTerm make_int64(ErlNifEnv* env, ErlNifSInt64 i) @extern("enif_make_int64");
extern fn ErlNifTerm make_list(ErlNifEnv* env, ulong cnt, ...) @extern("enif_make_list");
extern fn ErlNifTerm make_list1(ErlNifEnv* env, ErlNifTerm e1) @extern("enif_make_list1");
extern fn ErlNifTerm make_list_cell(ErlNifEnv* env, ErlNifTerm head, ErlNifTerm tail) @extern("enif_make_list_cell");
extern fn ErlNifTerm make_list_from_array(ErlNifEnv* env, ErlNifTerm[] arr, ulong cnt) @extern("enif_make_list_from_array");
extern fn ErlNifTerm make_long(ErlNifEnv* env, long i) @extern("enif_make_long");
extern fn int make_map_put(ErlNifEnv* env, ErlNifTerm map_in, ErlNifTerm key, ErlNifTerm value, ErlNifTerm* map_out) @extern("enif_make_map_put");
extern fn int make_map_remove(ErlNifEnv* env, ErlNifTerm map_in, ErlNifTerm key, ErlNifTerm* map_out) @extern("enif_make_map_remove");
extern fn int make_map_update(ErlNifEnv* env, ErlNifTerm map_in, ErlNifTerm key, ErlNifTerm new_value, ErlNifTerm* map_out) @extern("enif_make_map_update");
extern fn int make_map_from_arrays(ErlNifEnv* env, ErlNifTerm[] keys, ErlNifTerm[] values, usz cnt, ErlNifTerm* map_out) @extern("enif_make_map_from_arrays");
extern fn ErlNifTerm make_monitor_term(ErlNifEnv* env, ErlNifMonitor* mon) @extern("enif_make_monitor_term");
extern fn int make_new_atom(ErlNifEnv* env, char* name, ErlNifTerm* atom, ErlNifCharEncoding encoding) @extern("enif_make_new_atom");
extern fn int make_new_atom_len(ErlNifEnv* env, char* name, usz len, ErlNifTerm* atom, ErlNifCharEncoding encoding) @extern("enif_make_new_atom_len");
extern fn char* make_new_binary(ErlNifEnv* env, usz size, ErlNifTerm* termp) @extern("enif_make_new_binary");
extern fn ErlNifTerm make_new_map(ErlNifEnv* env) @extern("enif_make_new_map");
extern fn ErlNifTerm make_pid(ErlNifEnv* env, ErlNifPid* pid) @extern("enif_make_pid");
extern fn ErlNifTerm make_ref(ErlNifEnv* env) @extern("enif_make_ref");
extern fn ErlNifTerm make_resource(ErlNifEnv* env, void* obj) @extern("enif_make_resource");
extern fn ErlNifTerm make_resource_binary(ErlNifEnv* env, void* obj, void* data, usz size) @extern("enif_make_resource_binary");
extern fn int make_reverse_list(ErlNifEnv* env, ErlNifTerm list_in, ErlNifTerm* list_out) @extern("enif_make_reverse_list");
extern fn ErlNifTerm make_string(ErlNifEnv* env, char* string, ErlNifCharEncoding encoding) @extern("enif_make_string");
extern fn ErlNifTerm make_string_len(ErlNifEnv* env, char* string, usz len, ErlNifCharEncoding encoding) @extern("enif_make_string_len");
extern fn ErlNifTerm make_sub_binary(ErlNifEnv* env, ErlNifTerm bin_term, usz pos, usz size) @extern("enif_make_sub_binary");
extern fn ErlNifTerm make_tuple(ErlNifEnv* env, ulong cnt, ...) @extern("enif_make_tuple");
extern fn ErlNifTerm make_tuple1(ErlNifEnv* env, ErlNifTerm e1) @extern("enif_make_tuple1");
extern fn ErlNifTerm make_tuple_from_array(ErlNifEnv* env, ErlNifTerm[] arr, ulong cnt)  @extern("enif_make_tuple_from_array");
extern fn ErlNifTerm make_uint(ErlNifEnv* env, int i) @extern("enif_make_uint");
extern fn ErlNifTerm make_uint64(ErlNifEnv* env, ErlNifUInt i) @extern("enif_make_uint64");
extern fn ErlNifTerm make_ulong(ErlNifEnv* env, ulong i) @extern("enif_make_ulong");
extern fn ErlNifTerm make_unique_integer(ErlNifEnv* env, ErlNifUniqueInteger properties) @extern("enif_make_unique_integer");
extern fn int map_iterator_create(ErlNifEnv* env, ErlNifTerm map, ErlNifMapIterator* iter, ErlNifMapIteratorEntry entry) @extern("enif_map_iterator_create");
extern fn void map_iterator_destroy(ErlNifEnv* env, ErlNifMapIterator* iter) @extern("enif_map_iterator_destroy");
extern fn int map_iterator_get_pair(ErlNifEnv* env, ErlNifMapIterator* iter, ErlNifTerm* key, ErlNifTerm* value) @extern("enif_map_iterator_get_pair");
extern fn int map_iterator_is_head(ErlNifEnv* env, ErlNifMapIterator* iter) @extern("enif_map_iterator_is_head");
extern fn int map_iterator_is_tail(ErlNifEnv* env, ErlNifMapIterator* iter) @extern("enif_map_iterator_is_tail");
extern fn int map_iterator_next(ErlNifEnv* env, ErlNifMapIterator* iter) @extern("enif_map_iterator_next");
extern fn int map_iterator_prev(ErlNifEnv* env, ErlNifMapIterator* iter) @extern("enif_map_iterator_prev");
extern fn int monitor_process(ErlNifEnv* caller_env, void* obj, ErlNifPid* target_pid, ErlNifMonitor* mon) @extern("enif_monitor_process");
extern fn ErlNifTime monotonic_time(ErlNifTimeUnit time_unit) @extern("enif_monotonic_time");
extern fn ErlNifMutex* mutex_create(char* name) @extern("enif_mutex_create");
extern fn void mutex_destroy(ErlNifMutex* mtx) @extern("enif_mutex_destroy");
extern fn void mutex_lock(ErlNifMutex* mtx) @extern("enif_mutex_lock");
extern fn char* mutex_name(ErlNifMutex* mtx) @extern("enif_mutex_name");
extern fn int mutex_trylock(ErlNifMutex* mtx) @extern("enif_mutex_trylock");
extern fn void mutex_unlock(ErlNifMutex* mtx) @extern("enif_mutex_unlock");
extern fn ErlNifTerm now_time(ErlNifEnv* env) @extern("enif_now_time");
extern fn ErlNifResourceType* open_resource_type(ErlNifEnv* env, char* module_str, char* name, ErlNifResourceDtor* dtor, ErlNifResourceFlags flags, ErlNifResourceFlags* tried) @extern("enif_open_resource_type");
extern fn ErlNifResourceType* open_resource_type_x(ErlNifEnv* env, char* name, ErlNifResourceTypeInit* init, ErlNifResourceFlags flags, ErlNifResourceFlags* tried) @extern("enif_open_resource_type_x");
extern fn ErlNifResourceType* init_resource_type(ErlNifEnv* env, char* name, ErlNifResourceTypeInit* init, ErlNifResourceFlags flags, ErlNifResourceFlags* tried) @extern("enif_init_resource_type");
extern fn int port_command(ErlNifEnv* env, ErlNifPort* to_port, ErlNifEnv* msg_env, ErlNifTerm msg) @extern("enif_port_command");
extern fn void* priv_data(ErlNifEnv* env) @extern("enif_priv_data");
extern fn ErlNifTerm raise_exception(ErlNifEnv* env, ErlNifTerm reason) @extern("enif_raise_exception");
extern fn void* realloc(void* ptr, usz size) @extern("enif_realloc");
extern fn int realloc_binary(ErlNifBinary* bin, usz size) @extern("enif_realloc_binary");
extern fn void release_binary(ErlNifBinary* bin) @extern("enif_release_binary");
extern fn void release_resource(void* obj) @extern("enif_release_resource");
//extern fn ErlNifRWLock* rwlock_create(char* name) @extern("enif_rwlock_create");
//extern fn void rwlock_destroy(ErlNifRWLock* rwlck) @extern("enif_rwlock_destroy");
//extern fn char* rwlock_name(ErlNifRWLock* rwlck) @extern("enif_rwlock_name");
//extern fn void rwlock_rlock(ErlNifRWLock* rwlck) @extern("enif_rwlock_rlock");
//extern fn void rwlock_runlock(ErlNifRWLock* rwlck) @extern("enif_rwlock_runlock");
//extern fn void rwlock_rwlock(ErlNifRWLock* rwlck) @extern("enif_rwlock_rwlock");
//extern fn void rwlock_rwunlock(ErlNifRWLock* rwlck) @extern("enif_rwlock_rwunlock");
//extern fn int rwlock_tryrlock(ErlNifRWLock* rwlck) @extern("enif_rwlock_tryrlock");
//extern fn int rwlock_tryrwlock(ErlNifRWLock* rwlck) @extern("enif_rwlock_tryrwlock");
extern fn ErlNifTerm schedule_nif(ErlNifEnv* caller_env, char* fun_name, int flags, ErlNifFuncPtr, int argc, ErlNifTerm[] argv) @extern("enif_schedule_nif");
extern fn int select(ErlNifEnv* env, ErlNifEvent event, ErlNifSelectFlags mode, void* obj, ErlNifPid* pid, ErlNifTerm ref) @extern("enif_select");
extern fn int select_read(ErlNifEnv* env, ErlNifEvent event, void* obj, ErlNifPid* pid, ErlNifTerm msg, ErlNifEnv* msg_env) @extern("enif_select_read");
extern fn ErlNifPid* self(ErlNifEnv* caller_env, ErlNifPid* pid) @extern("enif_self");
extern fn int send(ErlNifEnv* caller_env, ErlNifPid* to_pid, ErlNifEnv* msg_env, ErlNifTerm msg) @extern("enif_send");
extern fn int set_option(ErlNifEnv* env, ErlNifOption opt, ...) @extern("enif_set_option");
extern fn void set_pid_undefined(ErlNifPid* pid) @extern("enif_set_pid_undefined");
extern fn ulong sizeof_resource(void* obj) @extern("enif_sizeof_resource");
extern fn int snprintf(char* str, usz size, char* format, ...) @extern("enif_snprintf");
extern fn void system_info(ErlNifSysInfo* sys_info_ptr, usz size) @extern("enif_system_info");
extern fn int term_to_binary(ErlNifEnv* env, ErlNifTerm term, ErlNifBinary* bin) @extern("enif_term_to_binary");
extern fn ErlNifTermType term_type(ErlNifEnv* env, ErlNifTerm term) @extern("enif_term_type");
//extern fn int thread_create(char* name, ErlNifTid* tid, EnifThreadFuncPtr*,void* args, ErlNifThreadOpts* opts) @extern("enif_thread_create");
extern fn void thread_exit(void* resp) @extern("enif_thread_exit");
extern fn int thread_join(ErlNifTid, void* *respp) @extern("enif_thread_join");
extern fn char* thread_name(ErlNifTid tid) @extern("enif_thread_name");
//extern fn ErlNifThreadOpts* thread_opts_create(char* name) @extern("enif_thread_opts_create");
//extern fn void thread_opts_destroy(ErlNifThreadOpts* opts) @extern("enif_thread_opts_destroy");
extern fn ErlNifTid thread_self() @extern("enif_thread_self");
extern fn int thread_type() @extern("enif_thread_type");
extern fn ErlNifTime time_offset(ErlNifTimeUnit time_unit) @extern("enif_time_offset");
//extern fn void* tsd_get(ErlNifTSDKey key) @extern("enif_tsd_get");
//extern fn int tsd_key_create(char* name, ErlNifTSDKey* key) @extern("enif_tsd_key_create");
//extern fn void tsd_key_destroy(ErlNifTSDKey key) @extern("enif_tsd_key_destroy");
//extern fn void tsd_set(ErlNifTSDKey key, void* data) @extern("enif_tsd_set");
extern fn int vfprintf(File* stream, char* format, ap...) @extern("enif_vfprintf");
extern fn int vsnprintf(char* str, usz size, char* format, ap...) @extern("enif_vsnprintf");
extern fn int whereis_pid(ErlNifEnv* caller_env, ErlNifTerm name, ErlNifPid* pid) @extern("enif_whereis_pid");
extern fn int whereis_port(ErlNifEnv* caller_env, ErlNifTerm name, ErlNifPort* port) @extern("enif_whereis_port");


//extern fn ErlNifTerm make_string(ErlNifEnv*, char*, int) @extern("enif_make_string");
//extern fn ErlNifTerm make_int(ErlNifEnv*, int) @extern("enif_make_int");
//extern fn ErlNifTerm make_badarg(ErlNifEnv*) @extern("enif_make_badarg");
//extern fn int get_int(ErlNifEnv*, ErlNifTerm, int*) @extern("enif_get_int");
//extern fn ErlNifTerm make_atom(ErlNifEnv*, char*) @extern("enif_make_atom");
//extern fn ErlNifTerm make_list_from_array(ErlNifEnv*, ErlNifTerm[], uint) @extern("enif_make_list_from_array");
//extern fn ErlNifTerm make_tuple_from_array(ErlNifEnv*, ErlNifTerm[], uint) @extern("enif_make_tuple_from_array");
